def remainder(a, b)
	out -> a - (a / b * b)

def mod(a, b)
	r -> remainder(a, b)
	out -> cond(r < 0, r + b, r)

def max(a, b)
	out -> cond(a < b, b, a)

def min(a, b)
	out -> cond(a < b, a, b)

def abs(number)
	out -> cond(number > 0, number, -number)

def pow(base, power)
	assertEx(-1 < power, ERROR_ILLEGAL_ARGUMENT)
	number -> 1
	while power
		number -> number * base
		power -> power - 1
	out -> number

# Babylonian method
def sqrt(number)
	assertEx(-1 < number, ERROR_ILLEGAL_ARGUMENT)
	x -> number
	nextX -> max(number / 2, 1)
	while x != nextX
		x -> nextX
		nextX -> (x + (number / x)) / 2
	out -> x

# Microsoft Visual Basic (6 and earlier)
memory[_randomMultipier] -> 228134297 * 5
const RANDOM_INCREMENT -> 12820163
const RANDOM_MODULUS -> 16777216
def random(number)
	memory[_randomSeed] -> mod(memory[_randomMultipier] * memory[_randomSeed] + RANDOM_INCREMENT, RANDOM_MODULUS)
	out -> mod(memory[_randomSeed], number)