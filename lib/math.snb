def remainder(a, b)
	out -> a - (a / b * b)

def mod(a, b)
	r -> remainder(a, b)
	out -> cond(r < 0, r + b, r)

def max(a, b)
	out -> cond(a < b, b, a)

def min(a, b)
	out -> cond(a < b, a, b)

def abs(number)
	out -> cond(number > 0, number, -number)

def pow(base, power)
	assertEx(-1 < power, ERROR_ILLEGAL_ARGUMENT)
	number -> 1
	while power
		number -> number * base
		power -> power - 1
	out -> number

# ALL TRIANGULAR FUNCTIONS TAKE AND RETURN INTEGER * 100 AS FLOATS
const PI -> 314
# Bhaskara approximation
def cos(n)
	sign -> 1
	n -> mod(n, 2 * PI)
	if and((PI / 2) < n, n < (3 * PI / 2))
		n -> n - PI
		sign -> -1
	if and((3 * PI / 2) <= n, n < (2 * PI))
		n -> 2 * PI - n
	out -> sign * (9869600 - (400 * n * n)) / (98696 + (n * n))

def sin(n)
	out -> cos(PI / 2 - n)

# credit: https://www.dsprelated.com/showarticle/1052.php
def atan(n)
	out -> (97 * n / 100) - (19 * n * n * n / 1000000)

def atan2(y, x)
	out -> 0
	if x != 0
		if abs(x) > abs(y)
			z -> 100 * y / x
			if x > 0
				out -> atan(z)
			if and((x > 0) = false, y >= 0)
				out -> atan(z) + PI
			if and((x > 0) = false, (y >= 0) = false)
				out -> atan(z) - PI
		if (abs(x) > abs(y)) = false
			z -> 100 * x / y
			if y > 0
				out -> -atan(z) + (PI / 2)
			if (y > 0) = false
				out -> -atan(z) - (PI / 2)
	if x = 0
		if (y > 0)
			out -> PI / 2
		if (y < 0)
			out -> -PI / 2

# Babylonian method
def sqrt(number)
	assertEx(-1 < number, ERROR_ILLEGAL_ARGUMENT)
	x -> number
	nextX -> max(number / 2, 1)
	while x != nextX
		x -> nextX
		nextX -> (x + (number / x)) / 2
	out -> x

# Microsoft Visual Basic (6 and earlier)
memory[_randomMultipier] -> 228134297 * 5
const RANDOM_INCREMENT -> 12820163
const RANDOM_MODULUS -> 16777216
def random(number)
	memory[_randomSeed] -> mod(memory[_randomMultipier] * memory[_randomSeed] + RANDOM_INCREMENT, RANDOM_MODULUS)
	out -> mod(memory[_randomSeed], number)