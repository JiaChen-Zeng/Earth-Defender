const Tower_size -> 4
const Tower_index -> 0
const Tower_level -> 1
const Tower_time -> 2
const Tower_animating -> 3

const TOWER_WIDTH -> LANE_WIDTH
const TOWER_HEIGHT -> 10
const TOWER_Y -> SCREEN_HEIGHT - TOWER_HEIGHT
const TOWER_LEVEL_MAX -> 10 # level 0 for empty tower
const TOWER_COLOR_EMPTY -> 777777
const TOWER_COLOR_HIT -> 917777
memory[_towerSpeed] -> 45
memory[_towerSpeed + 1] -> 30
memory[_towerSpeed + 2] -> 21
memory[_towerSpeed + 3] -> 17
memory[_towerSpeed + 4] -> 14
memory[_towerSpeed + 5] -> 11
memory[_towerSpeed + 6] -> 10
memory[_towerSpeed + 7] -> 9
memory[_towerSpeed + 8] -> 8
memory[_towerSpeed + 9] -> 7

def Tower(this, index, level)
	memory[this + Tower_index] -> index
	memory[this + Tower_level] -> level
	memory[this + Tower_time] -> 0
	memory[this + Tower_animating] -> false

def Tower_update(this)
	memory[this + Tower_time] -> mod(memory[this + Tower_time] + 1, Tower_getShootingSpeed(this))
	if memory[this + Tower_time] = 0
		onTowerShoot(memory[this + Tower_index])

def Tower_draw(this)
	if memory[this + Tower_animating] = false
		color -> memory[_colors + memory[this + Tower_level] - 1]
		if memory[this + Tower_level] = 0
			color -> TOWER_COLOR_EMPTY

		Tower_drawInternal(this, color, 0)

# empty, normal, hit
def Tower_drawInternal(this, color, offsetX)
	x -> getLaneX(memory[this + Tower_index]) + offsetX
	if memory[this + Tower_level] = 0
		drawRectOutline(x, TOWER_Y, TOWER_WIDTH, TOWER_HEIGHT, color)
		drawLine(x + 2, TOWER_Y + 2, x + TOWER_WIDTH - 3, TOWER_Y + TOWER_HEIGHT - 3, color)
		drawLine(x + TOWER_WIDTH - 3, TOWER_Y + 2, x + 2, TOWER_Y + TOWER_HEIGHT - 3, color)
	if memory[this + Tower_level] != 0
		drawRect(x, TOWER_Y, TOWER_WIDTH, TOWER_HEIGHT, color)
		drawRect(x + (TOWER_WIDTH / 2) - 1, TOWER_Y - 3, 2, 3, color)

def Tower_animateHit(this)
	memory[this + Tower_animating] -> true
	draw()
	Tower_drawInternal(this, TOWER_COLOR_HIT, 0)
	sleep(5)
	draw()
	Tower_drawInternal(this, TOWER_COLOR_HIT, -1)
	sleep(5)
	draw()
	Tower_drawInternal(this, TOWER_COLOR_HIT, 1)
	sleep(5)
	memory[this + Tower_animating] -> false

def Tower_addLevel(this, difference)
	out -> false
	newLevel -> memory[this + Tower_level] + difference
	if and(0 <= newLevel, newLevel <= TOWER_LEVEL_MAX)
		memory[this + Tower_level] -> newLevel
		out -> true

def Tower_hit(this)
	# shooting speed decreased but no need to adjust time
	playTowerHitSound()
	Tower_animateHit(this) # TODO: move to main and animate all hit tower at once
	memory[this + Tower_level] -> max(memory[this + Tower_level] - 1, 0)
	if memory[this + Tower_level] = 0
		onTowerDestroyed(memory[this + Tower_index])

def Tower_getShootingSpeed(this)
	out -> memory[_towerSpeed + memory[this + Tower_level] - 1]