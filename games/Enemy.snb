const Enemy_size -> 9
const Enemy_life -> 0
const Enemy__path -> 1
const Enemy_x -> 2 # float
const Enemy_y -> 4 # float
const Enemy_speedBase -> 6
const Enemy_speedBuff -> 7
const Enemy_time -> 8

const ENEMY_RADIUS -> 5
const ENEMY_SPEED_BASE -> 4 # frames per movement of 1 pixel
const ENEMY_SPEED_BUFF_RATE -> 5
const ENEMY_SPEED_MIN -> 60
const ENEMY_COLOR -> 440000
const ENEMY_COLOR_HIT -> 444444
const ENEMY_COLOR_EYE -> 000000

def Enemy(this, life, _path)
	memory[this + Enemy_life] -> life
	memory[this + Enemy__path] -> _path
	Float_fromInt(this + Enemy_x, memory[_path + Path_fromX], POINT_PRECISION)
	Float_fromInt(this + Enemy_y, memory[_path + Path_fromY], POINT_PRECISION)
	memory[this + Enemy_speedBase] -> ENEMY_SPEED_BASE
	memory[this + Enemy_speedBuff] -> 0
	memory[this + Enemy_time] -> 0

def Enemy_update(this)
	memory[this + Enemy_time] -> mod(memory[this + Enemy_time] + 1, Enemy_getSpeed(this))
	if memory[this + Enemy_time] = 0
		Enemy_move(this)

def Enemy_draw(this)
	Enemy_drawInternal(this, memory[_colors + ((memory[this + Enemy_life] + 4) / 5 - 1)])

def Enemy_drawInternal(this, color)
	x -> Float_roundToInt(this + Enemy_x)
	y -> Float_roundToInt(this + Enemy_y)
	drawPixel(x, y - ENEMY_RADIUS - 2, color)
	drawPixel(x, y - ENEMY_RADIUS - 1, color)
	drawCircle(x, y, ENEMY_RADIUS, color)
	drawPixel(x - 1, y + 2, ENEMY_COLOR_EYE)
	drawPixel(x + 1, y + 2, ENEMY_COLOR_EYE)

def Enemy_animateHit(this)
	Enemy_drawInternal(this, ENEMY_COLOR_HIT)
	flush()

def Enemy_move(this)
	_path -> memory[this + Enemy__path]
	InPath -> Path_inPath(_path, Float_roundToInt(this + Enemy_x), Float_roundToInt(this + Enemy_y))
	if InPath
		distanceX -> memory[_path + Path_toX] - memory[_path + Path_fromX]
		distanceY -> memory[_path + Path_toY] - memory[_path + Path_fromY]
		distance -> getLength(distanceX, distanceY)

		Float_fromInt(_tempFloat, distanceX, POINT_PRECISION)
		Float_divInt(_tempFloat, distance)
		Float_add(this + Enemy_x, _tempFloat)

		Float_fromInt(_tempFloat, distanceY, POINT_PRECISION)
		Float_divInt(_tempFloat, distance)
		Float_add(this + Enemy_y, _tempFloat)
		if Path_inPath(_path, Float_roundToInt(this + Enemy_x), Float_roundToInt(this + Enemy_y)) = false
			Float_fromInt(this + Enemy_x, memory[_path + Path_toX], POINT_PRECISION)
			Float_fromInt(this + Enemy_y, memory[_path + Path_toY] + 1, POINT_PRECISION)
	if InPath = false
		if (Float_roundToInt(this + Enemy_y) + 1) < SCREEN_HEIGHT
			Float_addInt(this + Enemy_y, 1)

def Enemy_hit(this, damage)
	memory[this + Enemy_life] -> memory[this + Enemy_life] - damage
	Enemy_animateHit(this)
	playEnemyHitSound()
	if memory[this + Enemy_life] = 0
		onEnemyKilled(this)

def Enemy_getToLane(this)
	out -> memory[memory[this + Enemy__path] + Path_toLane]

def Enemy_getSpeed(this)
	out -> memory[this + Enemy_speedBase] + (memory[this + Enemy_speedBuff] * ENEMY_SPEED_BUFF_RATE)

def Enemy_setSpeedBuff(this, value)
	memory[this + Enemy_speedBuff] -> value
	speed -> Enemy_getSpeed(this)
	i -> 0
	while i < (memory[this + Enemy_time] / speed)
		Enemy_move(this)
		i -> i + 1
	memory[this + Enemy_time] -> mod(memory[this + Enemy_time], speed)

def Enemy_collidedWithUltimate(this, y)
	out -> or(Enemy_acrossY(this, y), Enemy_acrossY(this, y + 3))

def Enemy_collidedWithTower(this)
	out -> TOWER_Y <= (Float_toInt(this + Enemy_y) + ENEMY_RADIUS)

def Enemy_collidedWithBullet(this, _bullet)
	circleX -> Float_roundToInt(this + Enemy_x)
	circleY -> Float_roundToInt(this + Enemy_y)
	out -> or(isPointInCircle(memory[_bullet + Bullet_x], memory[_bullet + Bullet_y], circleX, circleY, ENEMY_RADIUS), isPointInCircle(memory[_bullet + Bullet_x], memory[_bullet + Bullet_y] - 1, circleX, circleY, ENEMY_RADIUS))

def Enemy_collidedWithEnemy(this, _enemy)
	offsetX -> Float_roundToInt(this + Enemy_x) - Float_roundToInt(_enemy + Enemy_x)
	offsetY -> Float_roundToInt(this + Enemy_y) - Float_roundToInt(_enemy + Enemy_y)
	out -> ((offsetX * offsetX) + (offsetY * offsetY)) <= (4 * ENEMY_RADIUS * ENEMY_RADIUS)

def Enemy_arrived(this)
	out -> (Float_roundToInt(this + Enemy_y) + ENEMY_RADIUS) = (SCREEN_HEIGHT - 1)

def Enemy_acrossY(this, y)
	_y -> Float_roundToInt(this + Enemy_y)
	out -> and((_y - ENEMY_RADIUS) <= y, y <= (_y + ENEMY_RADIUS))